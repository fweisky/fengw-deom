# 可以设置任意值，用在JDBC JobStore中来唯一标识实例，但是所有集群节点中必须相同
org.quartz.scheduler.instanceName=jdbcJobStore

# 设置为AUTO即可，基于主机名和时间戳来产生实例ID
org.quartz.scheduler.instanceId=AUTO

# 要使用的ThreadPool实现的名称。Quartz附带的线程池是“org.quartz.simpl.SimpleThreadPool”，并且应该能够满足几乎每个用户的需求
org.quartz.threadPool.class=org.quartz.simpl.SimpleThreadPool

# 用于并发执行作业的线程数
org.quartz.threadPool.threadCount=10
org.quartz.threadPool.threadPriority=5
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread=true

org.quartz.jobStore.misfireThreshold=60000

# 将任务持久化到数据中。因为集群中节点依赖于数据库来传播Scheduler实例的状态，只能在使用JDBC JobStore时应用Quartz集群
# 这意味着必须使用JobStoreTX或是JobStoreCMT作为Job存储；不能在集群中使用RAMJobStore
org.quartz.jobStore.class=org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.StdJDBCDelegate
org.quartz.jobStore.tablePrefix=QRTZ_
org.quartz.jobStore.maxMisfiresToHandleAtATime=10

# 设置为true，就告诉了Scheduler实例要它参与到一个集群当中。这一属性会贯穿于调度框架的始终，用于修改集群环境中操作的默认行为
org.quartz.jobStore.isClustered=true

# 定义了Scheduler实例检入到数据库中的频率（单位：毫秒）。Scheduler检查是否其他的实例到了它们应当检入的时候未检入；
# 这能指出一个失败的Scheduler实例，且当前Scheduler会以此来接管任何执行失败并可恢复的Job。
# 通过检入操作，Scheduler也会更新自身的状态记录。clusterChedkinInterval属性值越小，Scheduler节点检查失败的Scheduler实例就越频繁。
# 默认值是15000（即15秒）
org.quartz.jobStore.clusterCheckinInterval=20000
